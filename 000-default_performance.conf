<VirtualHost *:80>

	# Hardware and software 
	# ---------------------
	# Apache performance configuration is highly dependent on the hardware and
	# software you use. A fast multi-core processor, and an SSD alonside high
	# RAM is always beneficial. The hardware certainly affects which Multi-
	# Processing Modules (MPM) you should use: prefork, event, worker, etc. 

	# Traffic load
	# ---------------------
	# Performance configuration is also dependent on the amount of traffic that
	# goes through your web server. The event and worker MPM might be more 
	# effecient to use if you have a really high traffic load on your web server,
	# otherwise it might be more efficient to use the prefork MPM.

	# Describing the different Multi-Processing Modules (MPM)
	# --------------------------------------------------------
	# The Apache HTTP server is designed to be a powerful and flexible web server
	# that can work on a very wide variety of platforms in a range of different
	# environments. Different platforms and enviroments often require different
	# features, or may have different ways of implementing the same feature most
	# efficiently. Therefore, Apache ships with a selection of Multi-Processing
	# Modules (MPM) which are responsible for binding to network ports on the
	# machine, accepting requests, and dispatching children to handle the requests.
	#
	# Prefork (UNIX) implements a non-threaded, pre-forking web server. Each server
	# process may answer incoming requests, and a parent process manages the size of
	# the server pool. It is useful for web sites that need to avoid threading for
	# compatibility with non-thread-safe libraries. It is also the best MPM for
	# isolating each request, so that a problem with a single request will not affect
	# another.
	#
	# Worker (UNIX) implements a hybrid multi-process multi-threaded server. By using
	# threads to serve requests, it is able to serve a large number of requests with
	# fewer system resources than a process-based server. However, it retains much of
	# the stability of process-based servers by keeping multiple processes available,
	# each with many threads. 
	# 
	# Event (UNIX) is designed to allow more requests to be served simultaneously by 
	# passing off some processing work to the listeners threads, freeing up the worker 
	# threads to serve new requests. Event is based on the worker MPM. The difference 
	# is that the event MPM will dedicate a thread to a request, not the whole HTTP connection.
	#
	# WinNT (Windows NT) is the default for the Windows NT operating systems. It uses a 
	# single control process which launches a single child process which in turn creates 
	# threads to handle requests. Capacity is configured using the ThreadsPerChild directive,
	# which sets the maximum number of concurrent client connections. 

	# Purge ununsed modules
	# ---------------------
	# It is always a good idea to purge (disable) modules that you do not use.
	# This will reduce the memory footprint of the Apache processes. Use the
	# command "apache2ctl -M" to see which modules are loaded, and use command
	# "sudo a2dismod <mod_name>" to disable a certain module.

	# Hostname the server use to identify itself
	ServerName www.example1.com

	# Alternate names for host when matching requests to name-virtual hosts
	ServerAlias example1.com

	# File(s) to consider as index for the directory requested
	DirectoryIndex index.html index.htm

	# Define default content type
	DefaultType text/html

	# Disable DNS lookups so hostnames are not logged (and passed to CGIs/SSIs in REMOTE_HOST)
	# Disabling it saves network traffic for those sites that do not truly need the reverse
	# lookup. It is also better for the end users because they do not have to suffer the extra
	# latency that a lookup entails. 
	HostnameLookups Off

	# Set the limit on the number of simultaneous requests that will be served. Any
	# connection attempts over the specified limit will normally be queued. Once a
	# child process is freed at the end of a different request, the connection will
	# then be serviced.
	# 
	# For non-threaded servers (e.g. prefork), MaxRequestWorkers translated into the
	# maximum number of child processes that will be launched to serve requests. The
	# default value is 256; to increase it, you must also raise ServerLimit.
	#
	# For threaded and hybrid servers (e.g. event or worker), MaxRequestWorkers restricts
	# the total number of threads that will be available to serve clients. For hybrid 
	# MPMs, the default value is 16 (ServerLimit), multiplied by 25 (ThreadsPerChild).
	# Therefore, to increase MaxRequestWorkers to a value that requires more than 16
	# processes, you must also raise ServerLimit.
	# MaxClients 256 (Apache 2.3.13 and lower)
	MaxRequestWorkers 256

	# For the prefork MPM, it sets the maxmimum configured value for MaxRequestWorkers
	# for the lifetime of the Apache process. For the worker and event MPMs, in combination
	# with ThreadLimit, it will set the maximum configured value for MaxRequestWorkers
	# for the lifetime of the Apache process. For the event MPM, it also defines how 
	# many old server processes may keep running and finish processing open connections.
	# Note: If ServerLimit is set to a value higher than needed, unused shared memory
	# will be set aside. 
	ServerLimit 256
	
	# StartServers sets the number of child server processes created on startup. As
	# the number of processes is dynamically controlled depending on the load, there
	# is usually little reason to adjust this parameter.
	# Default for each MPM: worker = 3, event = 3, prefork = 5
	StartServers 5

	# MinSpareServers sets the desired minimum number of idle child server processes.
	# An idle process is one which is not handling a request. If there are fewer than
	# MinSpareServers idle, then the parent process creates new children.
	# Default: 5
	# Pre-requisite: Pre-fork multi-processing module
	MinSpareServers 5

	# MaxSpareServers sets the desired maximum number of idle child server processes.
	# An idle process is one which is not handling a request. If there are more than
	# MaxSpareServers idle, then the parent process will kill off the excess processes.
	# Default: 10
	# Pre-requisite: Pre-fork multi-processing module
	MaxSpareServers 10

	# Limits the number of requests a child process handles during its life. Once the
	# limit has been hit, the child process dies. If set to 0, the child process will
	# never expire. The suggested value for this is a few thousand, to prevent memory
	# leakage. Be aware that setting this too low can slow down the system, since 
	# creating new processes does take up resources.
	# MaxRequestsPerChild (Apache 2.3.9 and lower)
	MaxConnectionsPerChild 4500

	# Set the maximum configured value for ThreadsPerChild for the lifetime of the
	# Apache process. Special care must be taken when using this directive. If the
	# number is set to a value much higher than ThreadsPerChild, extra unused shared
	# memory will be allocated. If both ThreadLimit and ThreadsPerChild are set to
	# values higher than the system can handle, Apache may not start or the system
	# may become unstable. The default value is 1920 with mpm_winnt and 64 when used
	# with the other MPMs.
	# ThreadLimit 64 (disabled since we use prefork MPM in this example)

	# Set the number of threads created by each child process. The child creates these
	# threads at startup and enver creates more. If using an MPM like mpm_winnt, where
	# there is only one child process, this number should be high enough to handle the
	# entire load of the server. If using an MPM like worker, where there are multiple
	# child processes, the total number of threads should be high enough to handle the
	# common load on the server.
	# ThreadsPerChild 25 (disabled since we use prefork MPM in this example)

	# Set the number of idle threads to handle requset spikes. Different MPMs deal with
	# this differently. However, the worker- and event MPM use default of 75 threads and
	# deal with idle threads on a server-wide basis. If there aren't enough idle threads
	# in the server, then child processes are created until the number of idle threads is
	# greater than number. Additional processes/threads might be created if 
	# ListenCoresBucketsRatio is enabled.
	# MinSpareThreads 0 (disabled since we use prefork MPM in this example)

	# Set the number of idle threads. Different MPMs deal with this directive differently.
	# However, the worker- and event MPM use default of 250 threads.These MPMs deal with
	# idle threads on a server-wide basis. If there are too many idle threads in the server,
	# then child processes are killed until the number of idle threads is less than this
	# number. Additional processes/threads might be created if ListenCoresBucketsRatio is
	# enabled.
	# MaxSpareThreads 0 (disabled since we use prefork MPM in this example)

	# Time (seconds) to wait for certain events before failing a request such as
	# I/O (reading data from client, writing data to client, etc)
	TimeOut 300

	# The keep-alive extension to HTTP/1.0 and HTTP/1.1 provide long-lived HTTP sessions
	# which allow multiple requests to be sent over the same TCP connection. In some cases
	# this has been shown to result in an ~50% speedup in latency times for HTML documents.
	KeepAlive On

	# Time (seconds) to wait for a subsequent request before closing the connection
	# Once a request has been received, the TimeOut value applies. Setting a high value
	# for KeepAliveTimeout may cause performance problems in heavily loaded servers.
	# The higher the timeout the more server processes will be kept occupied waiting on
	# connections with idle clients.
	KeepAliveTimeout 15

	# Limit number of requests allowed per connection when KeepAlive is on. If set to 0,
	# unlimited requests will be allowed. A high value is recommended for maxmimum server
	# performance.
	MaxKeepAliveRequests 500

	# The HTTP protocol allows content compression on the server, which can then be decompressed
	# on the client. This feature can reduce traffic thereby significantly improve transmission
	# speed. Requires "sudo a2enmod mod_deflate".
	AddOutputFilterByType DEFLATE application/javascript
	AddOutputFilterByType DEFLATE application/rss+xml
	AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
	AddOutputFilterByType DEFLATE application/x-font
	AddOutputFilterByType DEFLATE application/x-font-opentype
	AddOutputFilterByType DEFLATE application/x-font-otf
	AddOutputFilterByType DEFLATE application/x-font-truetype
	AddOutputFilterByType DEFLATE application/x-font-ttf
	AddOutputFilterByType DEFLATE application/x-javascript
	AddOutputFilterByType DEFLATE application/xhtml+xml
	AddOutputFilterByType DEFLATE application/xml
	AddOutputFilterByType DEFLATE font/opentype
	AddOutputFilterByType DEFLATE font/otf
	AddOutputFilterByType DEFLATE font/ttf
	AddOutputFilterByType DEFLATE image/svg+xml
	AddOutputFilterByType DEFLATE image/x-icon
	AddOutputFilterByType DEFLATE text/css
	AddOutputFilterByType DEFLATE text/html
	AddOutputFilterByType DEFLATE text/javascript
	AddOutputFilterByType DEFLATE text/plain
	AddOutputFilterByType DEFLATE text/xml
	
	# Apply the Gzip compression on html-files
	<Files *.html>
		SetOutputFilter DEFLATE
	</Files>

	# Points to the file dedicated to record server errors
	ErrorLog /var/www/example1.com/error.log

	# Points to the access.log which stores server hits.
	# It is possible to define multiple log files (defining CustomLog multiple times)
	# which can be handy if you want to log different log formats to different files
	CustomLog /var/www/example1.com/access.log combined

	# TransferLog <filename> sets the name of the log file or program where the
	# log information is to be sent. LogFormat sets the format of the default log file
	# CustomLog is a combination of setting the log file name and the format

	# Points to customizable page where traffic is redirected  when server encounters errors
	ErrorDocument 404 /error.html

</VirtualHost>

