<VirtualHost *:80>
	
	# Hostname that the server uses to identify itself
	ServerName www.example.com

	# Alternate names for host used when matching requests
	ServerAlias example.com

	# The following modules are required to create a proxy server and load balancer
	# 
	# mod_proxy "sudo a2enmod proxy"
	# The main proxy apache module for redirecting connections. It allows apache
	# to work as a gateway tot he underlying applications servers.
	# 
	# mod_proxy_http "sudo a2enmod proxy_http"
	# Add support for proxying HTTP/0.9, HTTP/1.0, and HTTP/1.1 connections
	#
	# mod_proxy_http2 "sudo a2enmod proxy_http2" (not required in this example)
	# Add support for proxying HTTP/2.0 connections
	#
	# mod_proxy_balancer "sudo a2enmod proxy_balancer"
	# Add load balancing features for multiple backend servers
	# 
	# mod_lbmethod_byrequests "sudo a2enmod lbmethod_byrequests"
	# Add load balancing request distribution features
	#
	# mod_proxy_connect "sudo a2enmod proxy_connect" (not required in this example)
	# Tunnels SSL requests through proxy servers by supporting the CONNECT HTTP method
	#
	# mod_proxy_ftp "sudo a2enmod proxy_ftp" (not required in this example)
	# Provides support for proxying FTP sites
	#
	# mod_proxy_wstunnel "sudo a2enmod proxy_wstunnel" (not required in this example)
	# Provides support for tunneling web socket connections to a backend websocket server

	# The cluster of servers to balance incoming traffic between
	<Proxy balancer://mycluster>

		# Parameters for BalancerMember
		# route: Route of worker inside load balancer. Is appended to session id
		# loadfactor: Number (1-100) defining the normalized weighted load applied to worker
		# timeout: Seconds to wait for data sent by / to the backend
		BalancerMember http://127.0.0.1:8080 route=route1 loadfactor=5 timeout=20
		BalancerMember http://127.0.0.1:8081 route=route2 loadfactor=5 timeout=20
		BalancerMember http://127.0.0.1:8082 route=route3 loadfactor=5 timeout=20
		
		# Load balancing methods are:
		# byrequests (default): weighted request count balancing
		# bytraffic: weighted traffic byte count balancing
		# bybusyness: scheduler keeps track of how many requests each worker is currently assigned at.
		# heartbeat: favors servers with more read (idle) capacity over time 
		ProxySet lbmethod=byrequests
	<Proxy>

	# This allows or prevents apache from functioning as a forward proxy server
	# Turn this off as we create a reverse proxy server, not a forward proxy server
	ProxyRequests Off

	# Pass the original Host header to the backend server
	ProxyPreserveHost On

	# Main proxy configuration directive to specify to where we want to proxy the request
	ProxyPass / balancer://mycluster/

	# Should have same configuration as ProxyPass
	# Tells apache to modify the response headers from the backend server.
	# Makes sure that if the backend server returns a location redirect header, the 
	# client's browser will be redirected to the proxy address and not the backend
	# server address, which would not work as intended.
	ProxyPassReverse / balancer://mycluster/

	# Timeout on proxy requests. Useful when having slow servers, and you would just
	# rather return a timeout and fail gracefully instead of waiting however long it
	# takes the server to return a response
	ProxyTimeout 300

	# Enable caching
	# Requires cache and cache_disk modules:
	# "sudo a2enmod cache" and "sudo a2enmod cache_disk"
	# Parameter 1: disk refers to store cache on disk
	# Parameter 2: / refers to what url-depth to store cache (root url in this case)
	CacheEnable disk /

	# Define the name of the directory on the disk to contain cache files.
	# Requires cache and cache_disk modules:
	# "sudo a2enmod cache" and "sudo a2enmod cache_disk"
	# The mod_cache_disk folder should exist by default. 
	CacheRoot /var/cache/apache2/mod_cache_disk

	# Turning this off enables the administrator to insert a CACHE filter at a point
	# in the filter stack chosen by the administrator. This provides the opportunity
	# to cache content before that content is personalised by the mod_include filter,
	# or optionally compressed by the mod_deflate filter.
	CacheQuickHandler Off

	# Enable cache lock for given URL space
	CacheLock On

	# Defines the directory in which cache locks are created. Locks consist of empty
	# files that only exist for stale URLs in flight, so is significantly less 
	# resource intensive than the traditional disk cache
	CacheLockPath /tmp/mod_cache-lock

	# Maximum age (in seconds) of any cache lock
	CacheLockMaxAge 5

	# Add X-Cache header to response with cache status (HIT/MISS/REVALIDATE)	
	CacheHeader On

	# Cache documents even if the "Last-Modified Date" header
	CacheIgnoreNoLastMod On

	# Ordinary requests containing a "Cache-Control: no-cache" or "Pragma: no cache"
	# header values will not be cached. This directive allows this behavior to be
	# overriden and save it to cache anyway.
	CacheIgnoreCacheControl On

	# Unset headers from upstream server
	# Requires headers module: "sudo a2enmod headers"
	# Sometimes the upstream server will have a cahcing strategy of their own.
	# Apache will not cache objects that already have "Cache-Control" or "Expires"
	# headers set by the upstream server. To ensure these objects are cached anyways,
	# ignore the upstream caching headers with below configuration:
	Header unset Expires
	Header unset Cache-Control
	Header unset Pragma

	# Set expiration headers for static content
	# Requires expires module: "sudo a2enmod expires"
	ExpiresActive On
	ExpiresByType text/html "access plus 1 years"
	ExpiresByType image/png "access plus 1 years"
	ExpiresByType application/javascript "access plus 1 years"

	# Do not cache requests to the REST API (example)
	<LocationMatch "^/api/v1/$">
		CacheDisable On
	</LocationMatch>

	# Error log
	ErrorLog /var/log/apache2/loadbalancer_error.log
	
	# Access log
	CustomLog /var/log/apache2/loadbalancer_access.log

</VirtualHost>













	
