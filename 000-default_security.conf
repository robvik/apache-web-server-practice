<VirtualHost *:443>

	# Define the top-level directive for all documents serviced by Apache
	DocumentRoot /var/www/html
	
	# Hostname that the server uses to identify itself
	ServerName www.example.com

	# Alternate names for host used when matching requests
	ServerAlias example.com

	# Disable the server-info directive
	# --------------------------------- 
	# If the <Location /server-info> directive is enabled, then you can see
	# information about the Apache configuration by accessing the /server-info
	# page. This could potentially include sensitive information about server
	# settings, such as the server version, system paths, database names, 
	# library information, and so on.

	# Disable the server-status directive
	# ----------------------------------
	# The <Location /server-status> directive lists information about server
	# performance, such as server uptime, server load, current HTTP requests,
	# and client IP addresses. An attacker may use this information to craft
	# an attack against the web server.

	# Disable the ServerSignature directive
	# -------------------------------------
	# The ServerSignature directive adds a footer to server-generated documents.
	# This footer includes information about your Apache configuration, such as
	# the Apache version and operating system you use. An attacker may use this
	# information to craft an attack against the web server.
	ServerSignature Off

	# Set ServerTokens directive to Prod
	# -------------------------------------
	# The ServerTokens directive controls the information that is sent back in
	# the server response header field. The ServerTokens directive should be set
	# to "Prod" in order to instruct Apache to return only "Apache" in the server
	# response headers.
	ServerTokens Prod

	# Disable Trace HTTP Request
	# --------------------------
	# TraceEnable is "On" by default which allows for Cross-Site Tracing Issue and
	# potentially giving the opportunity to steal your cookie information. Address
	# this security issue by disabling the TRACE HTTP method.
	TraceEnable Off

	# Disable Directory Listing
	# -------------------------
	# Directory listing expose the content of the directory. If this option is
	# enabled, an attacker can view any file. This could potentially lead to the 
	# attacker decompiling and reverse engineering an application in order to 
	# obtain the source code. The source code can then be analyzed to detect 
	# security flaws or obtain more information about an application, such as
	# database connection strings, passwords to other systems, etc. You can 
	# disable directory listing by using the Options -Indexes directive:
	# 
	# <Directory /your/website/directory>
	#	Options -Indexes
	# </Directory>

	# Disable unused modules
	# ----------------------
	# A default installation of the Apache HTTP server may include many pre-installed
	# modules that you don't need. To add insult to injury, some web server admins
	# have a tendency to take the path of least resistance and enable all remaining
	# modules to ensure everything works without a hassle. However, this opens up the
	# server to any security issues that might exist (or be discovered in the future)
	# for the enabled modules.
	# Use "apache2ctl -M" to see which modules are installed.
	# Use "sudo a2dismod <mod_name>" to disable a module

	# Run Apache with an appropriate user and group
	# ------------------------------------------
	# By default, Apache runs under the daemon user and group. However, it is best
	# practice to run Apache using a non-privileged account. Furthermore, if two
	# processes (such as Apache and MySQL) are running using the same user and group,
	# issues ine one process might lead to exploits in the other process. To change
	# Apache user and group, you need to change the User and Group directives in the
	# configuration file.

	# Restrict unwanted services
	# --------------------------
	# Disable all services that are not needed e.g. CGI execution and symbolic links.
	# You can disable these services using the Options directive in the configuration
	# file. 
	#
	# <Directory />
	#	Options -ExecCGI -FollowSymLinks -Includes
	# </Directory>

	# Enable logging and contineously inspect the logs
	# ------------------------------------------------
	# Apache logging provides detailed information about client requests made on your
	# web server, hence enabling such logging will prove useful when investigating the
	# cause of particular issues. 
	
	# Keep updating Apache to the latest version
	# ------------------------------------------
	# The Apache developer community is continously working on security issues and from
	# time to time release new security fixes. It is always recommended to use the latest
	# stable version of Apache as your web server.
	# Use "apache2ctl -v" to see what Apache version you use

	# Permissions on ServerRoot directory
	# -----------------------------------
	# In typical operation, Apache is started by the root user, and it switches to the user
	# defined by the User directive to serve hits. As is the case with any command that root
	# executes, you must take care that it is protected from modification by non-root users.
	# Not only must the files themselves be writeable only by root, but also the directories,
	# and parents of all directories. For example, if you choose to place ServerRoot in
	# /usr/local/apache then it is suggested that you create that directory as root, with
	# commands like these:
	#
	# "sudo mkdir /usr/local/apache"
	# "cd /usr/local/apache"
	# "sudo mkdir bin conf logs"
	# "sudo chown 0 . bin conf logs"
	# "sudo chgrp 0 . bin conf logs"
	# "sudo chmod 755 . bin conf logs"
	#
	# It is assumed that /, /usr, and /usr/local are only modifiable by root.

	# Restrict access to directories
	# ------------------------------
	# Deny all access to directories as default setting and only allow access when it is
	# necessary. This decreases the risks of allowing unwanted access.
	<Directory />
		Options None
		Order deny,allow
		Deny from all
	</Directory>
	
	# Use the mod_security module
	# ---------------------------
	# The mod_security module works as a firewall for our web applications and allows us
	# to monitor traffic on real time basis. It also helps us to protect our websites 
	# from brute force attacks. Simply install the module using:
	# "sudo apt-get install libapache2-modsecurity"
	# "sudo a2enmod mod-security"
	# "sudo apache2 force-reload"

	# Use the mod_evasive module
	# --------------------------
	# The mod_evasive module works very efficiently. It takes one request to process and
	# it processes it very well. It prevents DDoS attacks from doing as much damage. The
	# module detects attacks with three methods:
	# 1. If many requests come to the same page a few times per second
	# 2. If any child process tries to make more than 50 concurrent requests
	# 3. If any IP still tries to make new requests when its temporarily blacklisted
	# Use this guide to install mod_evasive: 
	# https://www.atlantic.net/vps-hosting/how-to-install-and-configure-modevasive-with-apache-on-ubuntu-18-04/

	# HTTP/1.1 vs. HTTP/2
	# -------------------
	# HTTP/2 has many advantages over HTTP/1.1, and is in general recommended to use for
	# many reasons, and security is no difference. HTTP2 is more secure as it uses binary
	# protocol instead of plaintext. HTTP/2 includes pipelining, response multiplexing,
	# server push and header compression using HPACK besides the properties of HTTP/1.1.
	# These properties make it difficult for the eavesdroppers to monitor or fingerprint
	# a website running on HTTP/2. 
	# HTTP/s requires the mod_http2 module:
	# "sudo a2enmod mod_http2"
	# h2 - instructing Apache to support HTTP/2 protocol over SSL/TLS
	# h2c - instructing Apache to support HTTP/2 over TCP
	# http/1.1 - if a client doesnt accept HTTP/2 then serve the request over HTTP/1.1
	Protocols h2 h2c http/1.1

	# TLS (and SSL)
	# -------------
	# TLS (Transport Layer Security) and SSL (Secure Sockets Layer) ensures that the data
	# transferred between the web server and the client are (almost) impossible to read.
	# It uses encryption algorithms to scramble data in transit, prevent hackers from
	# reading it as it is sent over the connection. TLS is an updated, more secure, version
	# of SSL. SSL 2.0, SSL 3.0, TLS 1.0, and TLS 1.1 reportedly suffers from cryptographic
	# flaws. Therefore, ensure to use TLS 1.2, which is the newest and most secure SSL 
	# protocol available. TLS and SSL requires the mod_ssl module:
	# "sudo a2enmod mod_ssl" 
	SSLEngine On
	SSLCertificateKeyFile /etc/apache2/ssl/private.pem
	SSLCertificateFile /etc/apache2/ssl/cert.pem
	SSLCertificationChainFile /etc/apache2/ssl/ca_bundle.crt
	SSLProtocol -ALL TLSv1.2
	# Only allow strong chiphers
	SSLCipherSuite ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM

</VirtualHost>
